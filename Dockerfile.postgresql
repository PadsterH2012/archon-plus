# PostgreSQL Dockerfile with pgvector extension for Archon Issue Database
# This container provides persistent storage for issue/bug management system
# 
# Build: docker build -f Dockerfile.postgresql -t archon-postgresql:latest .
# Run: docker run -d --name archon-issue-db \
#        -p 5432:5432 \
#        -v /mnt/network_repo/stack_dbs/postgresql/issue_db:/var/lib/postgresql/data \
#        -e POSTGRES_DB=archon_issues \
#        -e POSTGRES_USER=archon_user \
#        -e POSTGRES_PASSWORD=your_secure_password \
#        archon-postgresql:latest

FROM postgres:15

# Install build dependencies for pgvector
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    postgresql-server-dev-15 \
    && rm -rf /var/lib/apt/lists/*

# Install pgvector extension
RUN cd /tmp && \
    git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git && \
    cd pgvector && \
    make && \
    make install && \
    cd / && \
    rm -rf /tmp/pgvector

# Set default environment variables
ENV POSTGRES_DB=archon_issues
ENV POSTGRES_USER=archon_user
ENV POSTGRES_PASSWORD=archon_secure_password
ENV POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"

# Create directory for initialization scripts
RUN mkdir -p /docker-entrypoint-initdb.d

# Copy initialization script
COPY <<EOF /docker-entrypoint-initdb.d/01-init-extensions.sql
-- Enable required extensions for Archon
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- Create archon_issues database if it doesn't exist
SELECT 'CREATE DATABASE archon_issues'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'archon_issues');

-- Grant permissions to archon_user
GRANT ALL PRIVILEGES ON DATABASE archon_issues TO archon_user;

-- Log successful initialization
DO \$\$
BEGIN
    RAISE NOTICE 'ðŸŽ‰ ARCHON POSTGRESQL CONTAINER INITIALIZED SUCCESSFULLY!';
    RAISE NOTICE '================================================';
    RAISE NOTICE '';
    RAISE NOTICE 'âœ… Installed Extensions:';
    RAISE NOTICE '   - vector (for embeddings)';
    RAISE NOTICE '   - pgcrypto (for encryption)';
    RAISE NOTICE '   - uuid-ossp (for UUID generation)';
    RAISE NOTICE '   - pg_trgm (for text search)';
    RAISE NOTICE '';
    RAISE NOTICE 'âœ… Database: archon_issues';
    RAISE NOTICE 'âœ… User: archon_user';
    RAISE NOTICE 'âœ… Persistent Storage: /var/lib/postgresql/data';
    RAISE NOTICE '';
    RAISE NOTICE 'Ready for Archon Issue/Bug Management System!';
END\$\$;
EOF

# Copy PostgreSQL configuration optimizations
COPY <<EOF /docker-entrypoint-initdb.d/02-postgresql-config.sql
-- PostgreSQL configuration optimizations for Archon workloads
ALTER SYSTEM SET shared_preload_libraries = 'vector';
ALTER SYSTEM SET max_connections = 200;
ALTER SYSTEM SET shared_buffers = '256MB';
ALTER SYSTEM SET effective_cache_size = '1GB';
ALTER SYSTEM SET maintenance_work_mem = '64MB';
ALTER SYSTEM SET checkpoint_completion_target = 0.9;
ALTER SYSTEM SET wal_buffers = '16MB';
ALTER SYSTEM SET default_statistics_target = 100;
ALTER SYSTEM SET random_page_cost = 1.1;
ALTER SYSTEM SET effective_io_concurrency = 200;

-- Vector-specific optimizations
ALTER SYSTEM SET vector.max_connections = 100;

-- Reload configuration
SELECT pg_reload_conf();

RAISE NOTICE 'PostgreSQL configuration optimized for Archon workloads';
EOF

# Set proper permissions for data directory
RUN chown -R postgres:postgres /var/lib/postgresql/data

# Expose PostgreSQL port
EXPOSE 5432

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=5 \
    CMD pg_isready -U $POSTGRES_USER -d $POSTGRES_DB

# Use the default PostgreSQL entrypoint
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["postgres"]
