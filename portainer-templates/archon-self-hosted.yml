version: '3.8'

# Archon Stack with Self-Hosted Supabase
# This template deploys Archon with a complete self-hosted Supabase stack
# 
# Services:
# - postgres: PostgreSQL database with pgvector extension
# - supabase-auth: Authentication service (GoTrue)
# - supabase-rest: PostgREST API
# - supabase-realtime: Real-time subscriptions
# - supabase-storage: File storage service
# - archon-server: Core API and business logic (Port: 8181)
# - archon-mcp: Model Context Protocol interface (Port: 8051)  
# - archon-agents: AI operations and streaming (Port: 8052)
# - archon-ui: Web interface (Port: 3737)

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: supabase/postgres:15.1.1.78
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-archon_super_secret}
      - POSTGRES_DB=${POSTGRES_DB:-archon}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    ports:
      - target: 5432
        published: ${POSTGRES_PORT:-5432}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-archon}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Supabase Auth (GoTrue)
  supabase-auth:
    image: supabase/gotrue:v2.132.3
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=${API_EXTERNAL_URL:-http://localhost:8000}
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-archon_super_secret}@postgres:5432/${POSTGRES_DB:-archon}?search_path=auth&sslmode=disable
      - GOTRUE_SITE_URL=${SITE_URL:-http://localhost:3737}
      - GOTRUE_URI_ALLOW_LIST=${ADDITIONAL_REDIRECT_URLS:-}
      - GOTRUE_DISABLE_SIGNUP=${DISABLE_SIGNUP:-false}
      - GOTRUE_JWT_ADMIN_ROLES=service_role
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_EXP=${JWT_EXPIRY:-3600}
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_EXTERNAL_EMAIL_ENABLED=${ENABLE_EMAIL_SIGNUP:-true}
      - GOTRUE_MAILER_AUTOCONFIRM=${ENABLE_EMAIL_AUTOCONFIRM:-true}
      - GOTRUE_SMTP_ADMIN_EMAIL=${SMTP_ADMIN_EMAIL:-admin@example.com}
      - GOTRUE_SMTP_HOST=${SMTP_HOST:-supabase-inbucket}
      - GOTRUE_SMTP_PORT=${SMTP_PORT:-2500}
      - GOTRUE_SMTP_USER=${SMTP_USER:-fake_mail_user}
      - GOTRUE_SMTP_PASS=${SMTP_PASS:-fake_mail_password}
      - GOTRUE_SMTP_SENDER_NAME=${SMTP_SENDER_NAME:-fake_sender}
      - GOTRUE_MAILER_URLPATHS_INVITE=${MAILER_URLPATHS_INVITE:-/auth/v1/verify}
      - GOTRUE_MAILER_URLPATHS_CONFIRMATION=${MAILER_URLPATHS_CONFIRMATION:-/auth/v1/verify}
      - GOTRUE_MAILER_URLPATHS_RECOVERY=${MAILER_URLPATHS_RECOVERY:-/auth/v1/verify}
      - GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE=${MAILER_URLPATHS_EMAIL_CHANGE:-/auth/v1/verify}
    ports:
      - target: 9999
        published: 9999
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Supabase REST API (PostgREST)
  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    environment:
      - PGRST_DB_URI=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-archon_super_secret}@postgres:5432/${POSTGRES_DB:-archon}
      - PGRST_DB_SCHEMAS=${PGRST_DB_SCHEMAS:-public,storage,graphql_public}
      - PGRST_DB_ANON_ROLE=${ANON_KEY:-anon}
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_APP_SETTINGS_JWT_EXP=${JWT_EXPIRY:-3600}
    ports:
      - target: 3000
        published: 8000
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Supabase Realtime
  supabase-realtime:
    image: supabase/realtime:v2.25.50
    environment:
      - PORT=4000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-archon_super_secret}
      - DB_NAME=${POSTGRES_DB:-archon}
      - DB_AFTER_CONNECT_QUERY=SET search_path TO _realtime
      - DB_ENC_KEY=supabaserealtime
      - API_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - FLY_ALLOC_ID=fly123
      - FLY_APP_NAME=realtime
      - SECRET_KEY_BASE=UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8en0k56t29lHyEp8j
      - ERL_AFLAGS=-proto_dist inet_tcp
      - ENABLE_TAILSCALE=false
      - DNS_NODES=''
    ports:
      - target: 4000
        published: 4000
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Core Server Service (FastAPI + Socket.IO + Crawling)
  archon-server:
    image: ghcr.io/padsterh2012/archon-server:latest
    environment:
      # Supabase Configuration (Self-hosted)
      - SUPABASE_URL=http://supabase-rest:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}
      
      # Service Discovery
      - SERVICE_DISCOVERY_MODE=docker_swarm
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Port Configuration
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      
      # Optional: Logging
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
    ports:
      - target: 8181
        published: ${ARCHON_SERVER_PORT:-8181}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "sh", "-c", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8181/health')\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - postgres
      - supabase-rest

  # Model Context Protocol Server
  archon-mcp:
    image: ghcr.io/padsterh2012/archon-mcp:latest
    environment:
      # Supabase Configuration (Self-hosted)
      - SUPABASE_URL=http://supabase-rest:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}

      # Service Discovery
      - SERVICE_DISCOVERY_MODE=docker_swarm
      - TRANSPORT=sse
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Service URLs for inter-service communication
      - API_SERVICE_URL=http://archon-server:8181
      - AGENTS_SERVICE_URL=http://archon-agents:8052

      # Port Configuration
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}

      # Optional: Logging
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
    ports:
      - target: 8051
        published: ${ARCHON_MCP_PORT:-8051}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    healthcheck:
      test: ["CMD", "sh", "-c", "python -c \"import socket; s=socket.socket(); s.connect(('localhost', 8051)); s.close()\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - archon-server
      - archon-agents

  # AI Agents Service (ML/Reranking)
  archon-agents:
    image: ghcr.io/padsterh2012/archon-agents:latest
    environment:
      # Supabase Configuration (Self-hosted)
      - SUPABASE_URL=http://supabase-rest:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}

      # Service Discovery
      - SERVICE_DISCOVERY_MODE=docker_swarm
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Port Configuration
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}

      # Optional: Logging
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
    ports:
      - target: 8052
        published: ${ARCHON_AGENTS_PORT:-8052}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    healthcheck:
      test: ["CMD", "sh", "-c", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8052/health')\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - postgres
      - supabase-rest

  # Frontend Web Interface
  archon-ui:
    image: ghcr.io/padsterh2012/archon-ui:latest
    environment:
      - VITE_API_URL=http://${HOST:-localhost}:${ARCHON_SERVER_PORT:-8181}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - HOST=${HOST:-localhost}
    ports:
      - target: 5173
        published: ${ARCHON_UI_PORT:-3737}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - archon-server

  # Text Embeddings Inference (TEI) - Local Embedding Server
  archon-embeddings:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.8
    environment:
      - MODEL_ID=${EMBEDDING_MODEL_ID:-sentence-transformers/all-MiniLM-L6-v2}
      - MAX_CONCURRENT_REQUESTS=${TEI_MAX_CONCURRENT:-512}
      - MAX_BATCH_TOKENS=${TEI_MAX_BATCH_TOKENS:-16384}
      - MAX_BATCH_REQUESTS=${TEI_MAX_BATCH_REQUESTS:-32}
      - HOSTNAME=0.0.0.0
      - PORT=80
    ports:
      - target: 80
        published: ${ARCHON_EMBEDDINGS_PORT:-8080}
        protocol: tcp
        mode: ingress
    networks:
      - archon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: ${TEI_MEMORY_LIMIT:-2G}
          cpus: ${TEI_CPU_LIMIT:-2}
        reservations:
          memory: ${TEI_MEMORY_RESERVATION:-1G}
          cpus: ${TEI_CPU_RESERVATION:-1}

networks:
  archon-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local

# Environment Variables Required:
# POSTGRES_PASSWORD=your-secure-password
# JWT_SECRET=your-super-secret-jwt-token-with-at-least-32-characters-long
# SERVICE_ROLE_KEY=your-service-role-jwt-token
#
# Optional Environment Variables:
# POSTGRES_DB=archon
# POSTGRES_USER=postgres
# POSTGRES_PORT=5432
# ARCHON_SERVER_PORT=8181
# ARCHON_MCP_PORT=8051
# ARCHON_AGENTS_PORT=8052
# ARCHON_UI_PORT=3737
# ARCHON_EMBEDDINGS_PORT=8080
# HOST=your-domain.com
# LOG_LEVEL=INFO
# LOGFIRE_TOKEN=your-logfire-token
# API_EXTERNAL_URL=http://your-domain.com:8000
# SITE_URL=http://your-domain.com:3737
#
# TEI Configuration:
# EMBEDDING_MODEL_ID=sentence-transformers/all-MiniLM-L6-v2
# TEI_MAX_CONCURRENT=512
# TEI_MAX_BATCH_TOKENS=16384
# TEI_MAX_BATCH_REQUESTS=32
# TEI_MEMORY_LIMIT=2G
# TEI_CPU_LIMIT=2
# TEI_MEMORY_RESERVATION=1G
# TEI_CPU_RESERVATION=1
